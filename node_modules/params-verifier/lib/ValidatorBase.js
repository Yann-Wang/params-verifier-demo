'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Err = require('./Err');

var _dataType = require('./dataType');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ValidatorBase = function () {
    function ValidatorBase() {
        (0, _classCallCheck3.default)(this, ValidatorBase);

        this.typeList = ['number', 'boolean', 'string', 'date', 'array', 'object'];
        this.currentFieldInfo = {};
        this.filteredField = {};
    }

    (0, _createClass3.default)(ValidatorBase, [{
        key: 'fetchFieldInfo',
        value: function fetchFieldInfo(name, value, type) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            var fieldInfo = {
                name: name,
                value: value,
                type: type,
                businessType: options.type,
                businessTypeErrMsg: options.typeErrMsg,
                validator: options.validator,
                validatorErrMsg: options.validatorErrMsg,
                range: options.range
            };

            if (this.options.required !== undefined) {
                fieldInfo.required = this.options.required;
            }
            if (options.required !== undefined) {
                fieldInfo.required = options.required;
            }

            if (this.options.stringNotEmpty !== undefined) {
                fieldInfo.stringNotEmpty = this.options.stringNotEmpty;
            }
            if (options.stringNotEmpty !== undefined) {
                fieldInfo.stringNotEmpty = options.stringNotEmpty;
            }

            return fieldInfo;
        }
    }, {
        key: 'validate',
        value: function validate() {
            this.checkParams();
            return this.whetherToValidate();
        }
    }, {
        key: 'checkParams',
        value: function checkParams() {
            this.checkFieldNameAndType();
            this.checkOptionsParamsSupport();
        }
    }, {
        key: 'checkFieldNameAndType',
        value: function checkFieldNameAndType() {
            var _currentFieldInfo = this.currentFieldInfo,
                name = _currentFieldInfo.name,
                type = _currentFieldInfo.type;

            if (!(0, _dataType.isStr)(name)) {
                throw new _Err.ParamsError('the type of name must be string');
            }

            if (!(0, _dataType.isStr)(type)) {
                throw new _Err.ParamsError('the value of type must be a string');
            }
            if (this.typeList.indexOf(type) === -1) {
                throw new _Err.ParamsError('the type of ' + type + ' is not supported');
            }
        }
    }, {
        key: 'checkOptionsValidator',
        value: function checkOptionsValidator() {
            var _currentFieldInfo2 = this.currentFieldInfo,
                validator = _currentFieldInfo2.validator,
                validatorErrMsg = _currentFieldInfo2.validatorErrMsg;


            if (validator !== undefined) {
                if (!(0, _dataType.isFunc)(validator)) {
                    throw new _Err.ParamsError(validatorErrMsg || 'the type of options.validator must be function.');
                }
            }
        }
    }, {
        key: 'checkOptionsRequired',
        value: function checkOptionsRequired() {
            var required = this.currentFieldInfo.required;


            if (required !== undefined) {
                if (typeof required !== 'boolean') {
                    throw new _Err.ParamsError('the type of options.required must be boolean');
                }
            }
        }
    }, {
        key: 'whetherToValidate',
        value: function whetherToValidate() {
            var _currentFieldInfo3 = this.currentFieldInfo,
                required = _currentFieldInfo3.required,
                value = _currentFieldInfo3.value,
                name = _currentFieldInfo3.name;

            if (required || value !== undefined) {
                this.startValidateProcedure();
                this.recordFilteredField();
                return (0, _defineProperty3.default)({}, name, this.currentFieldInfo.value);
            }
            return false;
        }
    }, {
        key: 'recordFilteredField',
        value: function recordFilteredField() {
            var name = this.currentFieldInfo.name;

            this.filteredField[name] = this.currentFieldInfo.value;
        }
    }, {
        key: 'runValidator',
        value: function runValidator() {
            var _currentFieldInfo4 = this.currentFieldInfo,
                validator = _currentFieldInfo4.validator,
                validatorErrMsg = _currentFieldInfo4.validatorErrMsg,
                name = _currentFieldInfo4.name,
                value = _currentFieldInfo4.value;


            if (validator !== undefined) {
                var validationStatus = validator(value);
                if (!validationStatus) {
                    throw new _Err.ParamsError(validatorErrMsg || 'the value of field ' + name + ' don\'t match the validator.');
                }
            }
        }
    }, {
        key: 'filteredSingleField',
        value: function filteredSingleField() {
            return this.filteredField;
        }
    }]);
    return ValidatorBase;
}();

exports.default = ValidatorBase;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,