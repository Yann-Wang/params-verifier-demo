'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isNan = require('babel-runtime/core-js/number/is-nan');

var _isNan2 = _interopRequireDefault(_isNan);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Err = require('./Err');

var _ValidatorBase2 = require('./ValidatorBase');

var _ValidatorBase3 = _interopRequireDefault(_ValidatorBase2);

var _dataType = require('./dataType');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var StringValidator = function (_ValidatorBase) {
    (0, _inherits3.default)(StringValidator, _ValidatorBase);

    function StringValidator(data, options) {
        (0, _classCallCheck3.default)(this, StringValidator);

        var _this = (0, _possibleConstructorReturn3.default)(this, (StringValidator.__proto__ || (0, _getPrototypeOf2.default)(StringValidator)).call(this));

        _this.businessTypeList = ['mobile', 'id_card', 'passport', 'email', 'date'];
        _this.type = 'string';
        _this.value = data;
        _this.options = options || {};
        return _this;
    }

    (0, _createClass3.default)(StringValidator, [{
        key: 'singleField',
        value: function singleField(name, options) {
            this.currentFieldInfo = this.fetchFieldInfo(name, this.value, this.type, options);
            this.validate();
        }
    }, {
        key: 'checkOptionsParamsSupport',
        value: function checkOptionsParamsSupport() {
            this.checkOptionsBusinessType();
            this.checkOptionsValidator();
            this.checkOptionsRequired();
            this.checkOptionsStringNotEmpty();
        }
    }, {
        key: 'checkOptionsBusinessType',
        value: function checkOptionsBusinessType() {
            var businessType = this.currentFieldInfo.businessType;

            var types = this.businessTypeList;

            if (businessType !== undefined) {
                if (typeof businessType !== 'string') {
                    throw new _Err.ParamsError('the type of options.type must be string');
                }

                if (types.indexOf(businessType) === -1) {
                    throw new _Err.ParamsError('the value: ' + businessType + ' of options.type is not supported.');
                }
            }
        }
    }, {
        key: 'checkOptionsStringNotEmpty',
        value: function checkOptionsStringNotEmpty() {
            var stringNotEmpty = this.currentFieldInfo.stringNotEmpty;


            if (stringNotEmpty !== undefined) {
                if (typeof stringNotEmpty !== 'boolean') {
                    throw new _Err.ParamsError('the type of options.stringNotEmpty must be boolean');
                }
            }
        }
    }, {
        key: 'startValidateProcedure',
        value: function startValidateProcedure() {
            this.verifyType();
            this.checkStringNotEmpty();
            this.verifyBusinessType();
            this.runValidator();
        }
    }, {
        key: 'checkStringNotEmpty',
        value: function checkStringNotEmpty() {
            var _currentFieldInfo = this.currentFieldInfo,
                stringNotEmpty = _currentFieldInfo.stringNotEmpty,
                value = _currentFieldInfo.value,
                name = _currentFieldInfo.name;


            if (stringNotEmpty) {
                if (value === '') {
                    throw new _Err.ParamsError('the value of field ' + name + ' can\'t be empty.');
                }
            }
        }
    }, {
        key: 'verifyType',
        value: function verifyType() {
            var _currentFieldInfo2 = this.currentFieldInfo,
                value = _currentFieldInfo2.value,
                name = _currentFieldInfo2.name;

            if (!(0, _dataType.isStr)(value)) {
                throw new _Err.ParamsError('the type of ' + name + ' is not string.');
            }
        }
    }, {
        key: 'verifyBusinessType',
        value: function verifyBusinessType() {
            var _currentFieldInfo3 = this.currentFieldInfo,
                businessType = _currentFieldInfo3.businessType,
                businessTypeErrMsg = _currentFieldInfo3.businessTypeErrMsg,
                name = _currentFieldInfo3.name,
                value = _currentFieldInfo3.value,
                type = _currentFieldInfo3.type;


            if (businessType !== undefined) {
                var match = StringValidator.getLambdaExpressByBusinessType(businessType)(value);
                if (!match) {
                    throw new _Err.ParamsError(businessTypeErrMsg || 'the value of field ' + name + ' don\'t match the business type ' + businessType + ' of ' + type);
                }
            }
        }
    }], [{
        key: 'getLambdaExpressByBusinessType',
        value: function getLambdaExpressByBusinessType(businessType) {
            switch (businessType) {
                case 'mobile':
                    return function (value) {
                        return (/^[0-9]{11}$/.test(value)
                        );
                    };
                case 'id_card':
                    return function (value) {
                        return (/(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/.test(value)
                        );
                    };
                case 'passport':
                    return function (value) {
                        return (/(^[a-zA-Z]{5,17}$)|(^[a-zA-Z0-9]{5,17}$)/.test(value)
                        );
                    };
                case 'email':
                    return function (value) {
                        return (/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(value)
                        );
                    };
                case 'date':
                    return function (value) {
                        var date = new Date(value);
                        return Object.prototype.toString.call(date) === '[object Date]' && !(0, _isNan2.default)(date.getTime());
                    };
                default:
                    throw new Error('the business type of ' + businessType + ' for string is not defined.');
            }
        }
    }]);
    return StringValidator;
}(_ValidatorBase3.default);

exports.default = StringValidator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,