'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Err = require('./Err');

var _ValidatorBase2 = require('./ValidatorBase');

var _ValidatorBase3 = _interopRequireDefault(_ValidatorBase2);

var _dataType = require('./dataType');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NumberValidator = function (_ValidatorBase) {
    (0, _inherits3.default)(NumberValidator, _ValidatorBase);

    function NumberValidator(data, options) {
        (0, _classCallCheck3.default)(this, NumberValidator);

        var _this = (0, _possibleConstructorReturn3.default)(this, (NumberValidator.__proto__ || (0, _getPrototypeOf2.default)(NumberValidator)).call(this));

        _this.businessTypeList = ['enum'];
        _this.type = 'number';
        _this.value = data;
        _this.options = options || {};
        return _this;
    }

    (0, _createClass3.default)(NumberValidator, [{
        key: 'singleField',
        value: function singleField(name, options) {
            this.currentFieldInfo = this.fetchFieldInfo(name, this.value, this.type, options);
            this.validate();
        }
    }, {
        key: 'checkOptionsParamsSupport',
        value: function checkOptionsParamsSupport() {
            this.checkOptionsBusinessType();
            this.checkOptionsValidator();
            this.checkOptionsRequired();
        }
    }, {
        key: 'checkOptionsBusinessType',
        value: function checkOptionsBusinessType() {
            var _currentFieldInfo = this.currentFieldInfo,
                businessType = _currentFieldInfo.businessType,
                range = _currentFieldInfo.range;

            var types = this.businessTypeList;

            if (businessType !== undefined) {
                if (typeof businessType !== 'string') {
                    throw new _Err.ParamsError('the value of options.type for number must be string');
                }

                if (types.indexOf(businessType) === -1) {
                    throw new _Err.ParamsError('the value: ' + businessType + ' of options.type is not supported.');
                }

                if (businessType === 'enum') {
                    if (!range || !Array.isArray(range) || range.length !== 2 || range.some(function (item) {
                        return typeof item !== 'number' || parseInt(item, 10) !== item;
                    })) {
                        throw new _Err.ParamsError('the value of range field in options for enum type is invalid.');
                    }
                }
            }
        }
    }, {
        key: 'startValidateProcedure',
        value: function startValidateProcedure() {
            this.tryCastType();
            this.verifyType();
            this.verifyBusinessType();
            this.runValidator();
        }
    }, {
        key: 'tryCastType',
        value: function tryCastType() {
            var value = this.currentFieldInfo.value;

            if (typeof value === 'string' && /^[\d]+$/.test(value)) {
                this.currentFieldInfo.value = Number(value);
            }
        }
    }, {
        key: 'verifyType',
        value: function verifyType() {
            var _currentFieldInfo2 = this.currentFieldInfo,
                value = _currentFieldInfo2.value,
                name = _currentFieldInfo2.name;

            if (!(0, _dataType.isNum)(value)) {
                throw new _Err.ParamsError('the type of ' + name + ' is not number.');
            }
        }
    }, {
        key: 'verifyBusinessType',
        value: function verifyBusinessType() {
            var _currentFieldInfo3 = this.currentFieldInfo,
                businessType = _currentFieldInfo3.businessType,
                businessTypeErrMsg = _currentFieldInfo3.businessTypeErrMsg,
                range = _currentFieldInfo3.range,
                value = _currentFieldInfo3.value,
                name = _currentFieldInfo3.name,
                type = _currentFieldInfo3.type;


            if (businessType !== undefined) {
                var match = NumberValidator.getLambdaExpressByBusinessType(businessType)(value, range);
                if (!match) {
                    throw new _Err.ParamsError(businessTypeErrMsg || 'the value of field ' + name + ' don\'t match the business type ' + businessType + ' of ' + type);
                }
            }
        }
    }], [{
        key: 'getLambdaExpressByBusinessType',
        value: function getLambdaExpressByBusinessType(businessType) {
            switch (businessType) {
                case 'enum':
                    return function (value, range) {
                        return value >= range[0] && value <= range[1];
                    };
                default:
                    throw new Error('the business type of ' + businessType + ' for number is not defined.');
            }
        }
    }]);
    return NumberValidator;
}(_ValidatorBase3.default);

exports.default = NumberValidator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,